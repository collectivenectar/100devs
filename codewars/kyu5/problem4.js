// function sumPairs(ints, s) {
//   let earliestPairSum = []
//   for(let i = 0; i < ints.length; i++){
//     for(let j = i; j < ints.length; j++){
//       if(ints[i] + ints[j] === s && i != j){
//         if(earliestPairSum.length > 1){
//           if(earliestPairSum[1] > j && i < j){
//             earliestPairSum[0] = i
//             earliestPairSum[1] = j
//           }
//       }
//         else{
//           earliestPairSum[0] = i
//           earliestPairSum[1] = j
//         }
//     }
//   }
//   }
//   if(earliestPairSum.length > 0){
//     return [ints[earliestPairSum[0]], ints[earliestPairSum[1]]]
//   }
//   else{
//     return undefined
//   }
// }

//if there is already a found pair equal to sum, and the element we're currently looking at (in ints)
//is less than the second element of the found pair. Restrict the boundaries of the loop to the found
//pair (index) range, as anything after the found pair range (in ints array) isn't helpful, and adds work.
//
//Now begin looking at pairs. Can we do this without a nested for loop?
///Dictionary.
//This changes everything. Quadratic takes too long --
//Begin the loop inside the ints array, but now begin adding records to Dictionary
//Look at the given element in ints - does targetnumber - current element exist in dict?
//Or in this case, I don't need to return the element index, I just need the value. so I can use
//an array, but then we're iterating over an array again. The key exists or doesn't exist is an easy test. Faster.

function sumPairs(ints, s) {
  let dict = {};
  for(let i = 0; i < ints.length; i++){
    if(dict[s - ints[i]]){
      return [s - ints[i], ints[i]]
    }
    else{
      dict[ints[i]] = true;
    }
  }
}

//OK, wow, yeah, that ended up really simple. If the difference between the targetnumber and the current element
//is a key inside the dict, then return the difference(which is actually the dict key name) and the current element.
//Otherwise, set a key value pair of current element, paired with the bool true; the logic of if(dict[s - ints[i]])
//All keys generated by this will return true if they exist.

console.log(sumPairs([10, 5, 2, 3, 7, 5], 10))
